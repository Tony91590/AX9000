Index: libiwinfo-2021-01-06-23d2722b/include/iwinfo.h
===================================================================
--- libiwinfo-2021-01-06-23d2722b.orig/include/iwinfo.h
+++ libiwinfo-2021-01-06-23d2722b/include/iwinfo.h
@@ -29,6 +29,7 @@
 #define IWINFO_80211_N       (1 << 3)
 #define IWINFO_80211_AC      (1 << 4)
 #define IWINFO_80211_AD      (1 << 5)
+#define IWINFO_80211_AX      (1 << 6)
 
 #define IWINFO_CIPHER_NONE   (1 << 0)
 #define IWINFO_CIPHER_WEP40  (1 << 1)
@@ -91,7 +92,13 @@ enum iwinfo_htmode {
 	IWINFO_HTMODE_VHT160     = (1 << 6),
 	IWINFO_HTMODE_NOHT       = (1 << 7),
 
-	IWINFO_HTMODE_COUNT      = 8
+	IWINFO_HTMODE_HE20     = (1 << 8),
+	IWINFO_HTMODE_HE40     = (1 << 9),
+	IWINFO_HTMODE_HE80     = (1 << 10),
+	IWINFO_HTMODE_HE80_80  = (1 << 11),
+	IWINFO_HTMODE_HE160    = (1 << 12),
+
+	IWINFO_HTMODE_COUNT    = 13
 };
 
 extern const char *IWINFO_HTMODE_NAMES[IWINFO_HTMODE_COUNT];
Index: libiwinfo-2021-01-06-23d2722b/iwinfo_nl80211.c
===================================================================
--- libiwinfo-2021-01-06-23d2722b.orig/iwinfo_nl80211.c
+++ libiwinfo-2021-01-06-23d2722b/iwinfo_nl80211.c
@@ -2946,13 +2946,15 @@ struct nl80211_modes
 static int nl80211_get_modelist_cb(struct nl_msg *msg, void *arg)
 {
 	struct nl80211_modes *m = arg;
-	int bands_remain, freqs_remain;
+	int bands_remain, freqs_remain, iftype_data_remain;
 	uint16_t caps = 0;
 	uint32_t vht_caps = 0;
 	struct nlattr **attr = nl80211_parse(msg);
 	struct nlattr *bands[NL80211_BAND_ATTR_MAX + 1];
 	struct nlattr *freqs[NL80211_FREQUENCY_ATTR_MAX + 1];
-	struct nlattr *band, *freq;
+	struct nlattr *iftype_datas[NL80211_BAND_IFTYPE_ATTR_MAX + 1];
+	struct nlattr *band, *freq, *iftype_data;
+	uint8_t he_phy_cap[11];
 
 	if (attr[NL80211_ATTR_WIPHY_BANDS])
 	{
@@ -3018,6 +3020,30 @@ static int nl80211_get_modelist_cb(struc
 					m->hw |= IWINFO_80211_A;
 				}
 			}
+			
+			if (bands[NL80211_BAND_ATTR_IFTYPE_DATA])
+			{ // 11ax feature parse
+				nla_for_each_nested(iftype_data, bands[NL80211_BAND_ATTR_IFTYPE_DATA], iftype_data_remain)
+				{
+					nla_parse(iftype_datas, NL80211_BAND_IFTYPE_ATTR_MAX,
+							nla_data(iftype_data), nla_len(iftype_data), NULL);
+
+					if (!iftype_datas[NL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY])
+						continue;
+					m->hw |= IWINFO_80211_AX;
+					m->ht |= IWINFO_HTMODE_HE20 | IWINFO_HTMODE_HE40 | IWINFO_HTMODE_HE80;
+					nla_memcpy(he_phy_cap, iftype_datas[NL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY], 11);
+
+					switch((he_phy_cap[0] >> 3) & 3)
+					{
+						case 2:
+							m->ht |= IWINFO_HTMODE_HE80_80;
+							// fall through
+						case 1:
+							m->ht |= IWINFO_HTMODE_HE160;
+					}
+				}
+			}
 		}
 
 		m->ok = 1;
Index: libiwinfo-2021-01-06-23d2722b/api/nl80211.h
===================================================================
--- libiwinfo-2021-01-06-23d2722b.orig/api/nl80211.h
+++ libiwinfo-2021-01-06-23d2722b/api/nl80211.h
@@ -2613,6 +2613,11 @@ enum nl80211_band_attr {
 	NL80211_BAND_ATTR_VHT_MCS_SET,
 	NL80211_BAND_ATTR_VHT_CAPA,
 
+	NL80211_BAND_ATTR_IFTYPE_DATA,
+
+	NL80211_BAND_ATTR_EDMG_CHANNELS,
+	NL80211_BAND_ATTR_EDMG_BW_CONFIG,
+
 	/* keep last */
 	__NL80211_BAND_ATTR_AFTER_LAST,
 	NL80211_BAND_ATTR_MAX = __NL80211_BAND_ATTR_AFTER_LAST - 1
@@ -2711,6 +2716,41 @@ enum nl80211_frequency_attr {
 					NL80211_FREQUENCY_ATTR_IR_CONCURRENT
 
 /**
+ * enum nl80211_band_iftype_attr - Interface type data attributes
+ *
+ * @__NL80211_BAND_IFTYPE_ATTR_INVALID: attribute number 0 is reserved
+ * @NL80211_BAND_IFTYPE_ATTR_IFTYPES: nested attribute containing a flag attribute
+ *     for each interface type that supports the band data
+ * @NL80211_BAND_IFTYPE_ATTR_HE_CAP_MAC: HE MAC capabilities as in HE
+ *     capabilities IE
+ * @NL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY: HE PHY capabilities as in HE
+ *     capabilities IE
+ * @NL80211_BAND_IFTYPE_ATTR_HE_CAP_MCS_SET: HE supported NSS/MCS as in HE
+ *     capabilities IE
+ * @NL80211_BAND_IFTYPE_ATTR_HE_CAP_PPE: HE PPE thresholds information as
+ *     defined in HE capabilities IE
+ * @NL80211_BAND_IFTYPE_ATTR_MAX: highest band HE capability attribute currently
+ *     defined
+ * @NL80211_BAND_IFTYPE_ATTR_HE_6GHZ_CAPA: HE 6GHz band capabilities (__le16),
+ *	given for all 6 GHz band channels
+ * @__NL80211_BAND_IFTYPE_ATTR_AFTER_LAST: internal use
+ */
+enum nl80211_band_iftype_attr {
+	__NL80211_BAND_IFTYPE_ATTR_INVALID,
+
+	NL80211_BAND_IFTYPE_ATTR_IFTYPES,
+	NL80211_BAND_IFTYPE_ATTR_HE_CAP_MAC,
+	NL80211_BAND_IFTYPE_ATTR_HE_CAP_PHY,
+	NL80211_BAND_IFTYPE_ATTR_HE_CAP_MCS_SET,
+	NL80211_BAND_IFTYPE_ATTR_HE_CAP_PPE,
+	NL80211_BAND_IFTYPE_ATTR_HE_6GHZ_CAPA,
+
+	/* keep last */
+	__NL80211_BAND_IFTYPE_ATTR_AFTER_LAST,
+	NL80211_BAND_IFTYPE_ATTR_MAX = __NL80211_BAND_IFTYPE_ATTR_AFTER_LAST - 1
+};
+
+/**
  * enum nl80211_bitrate_attr - bitrate attributes
  * @__NL80211_BITRATE_ATTR_INVALID: attribute number 0 is reserved
  * @NL80211_BITRATE_ATTR_RATE: Bitrate in units of 100 kbps
Index: libiwinfo-2021-01-06-23d2722b/iwinfo_lib.c
===================================================================
--- libiwinfo-2021-01-06-23d2722b.orig/iwinfo_lib.c
+++ libiwinfo-2021-01-06-23d2722b/iwinfo_lib.c
@@ -65,7 +65,12 @@ const char *IWINFO_HTMODE_NAMES[] = {
 	"VHT80",
 	"VHT80+80",
 	"VHT160",
-	"NOHT"
+	"NOHT",
+	"HE20",
+	"HE40",
+	"HE80",
+	"HE80+80",
+	"HE160"
 };
 
 
