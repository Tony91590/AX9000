#!/bin/sh

# copyright            : (C) by 2021 Lin kai 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as         
# published by the Free Software Foundation                                
# You may obtain a copy of the License at                                   
# https://opensource.org/licenses/gpl-2.0.php 


. /lib/functions/block.sh

prepare_filesystem() {
	grep -q "$1" /proc/filesystems || {
		insmod $1
		wait
	}
}

blkdev=`dirname $DEVPATH`
device=`basename $DEVPATH`

mount_flag=1
if [ `basename $blkdev` != "block" ]; then
	mount_flag=0
else
	substr=$(echo $device|cut -c-2)
	partitions=`cat /proc/partitions | grep $device | wc -l`
	if [ $substr = "sd" -a $partitions -le 1 ]; then
		mount_flag=0
	fi
fi

proc_gpt_rsvd $device
[ "$?" = "1" ] && exit 0

if [ $mount_flag -eq 0 ]; then

	#mountpoint=`sed -ne "s|^[^ ]*/$device ||; T; s/ .*//p" /proc/self/mounts | grep -v uploadfiles`
	mountpoint=`cat /proc/self/mounts | grep $device | awk '{print $2}' | grep -v appdata`

	case "$ACTION" in
	add)
		#skip any system partition
		is_sys=`getdisk sysdisk $device`
		[ "$is_sys" = "0" ] && exit 0

		#skip any already mounted partition
		grep -q "^/dev/$device" /proc/mounts && exit 0

		mount_dev_section_cb() {
			mds_mount_target="$2"
			mds_mount_device="$3"
			mds_mount_fstype="$4"
			mds_mount_enabled="$6"
		}

		swap_dev_section_cb() {
			sds_swap_device="$2"
			return 0
		}
		config_get_automount
		automount_from_fstab="$from_fstab"
		[ "$automount_from_fstab" -eq 1 ] && {
			config_get_mount_section_by_device "/dev/$device"
			use_device="$mds_mount_device"
			[ "$mds_mount_enabled" -eq 1 ] && {
				if [ -n "$mds_mount_target" ]; then
					grep -q "/dev/$device" /proc/swaps 2>/dev/null || grep -q "^/dev/$device" /proc/mounts || {
						( mkdir -p "$mds_mount_target" && mount "$mds_mount_target" ) 2>&1 | tee /proc/self/fd/2 | logger -t 'fstab'
					}
				else
					logger -t 'fstab' "Mount enabled for $mds_mount_device but it doesn't have a defined mountpoint (target)"
				fi
			}
		}

		[ -z "$use_device" ] && {
			config_get_autoswap
			autoswap_from_fstab="$from_fstab"

			[ "$autoswap_from_fstab" -eq 1 ] && {
				config_get_swap_section_by_device "/dev/$device"
				use_device="$sds_swap_device"
			}
		}

		grep -q "/dev/$device" /proc/swaps 2>/dev/null || grep -q "^/dev/$device" /proc/mounts || {
			[ "$anon_mount" -eq 1 -a -z "$use_device" ] && {
				case "$device" in
					mtdblock*) ;;
					*)
						probe_type=`getdisk fs /dev/$device`
						case $probe_type in
							"ntfs")
								mnt_cmd="ntfs-3g -o noatime,umask=0000"
								;;
							"exfat")
								mnt_cmd="mount -t exfat -o noatime,umask=0000"
								;;
							"vfat")
								mnt_cmd="mount -t vfat -o utf8=1,noatime,umask=0000"
								;;
							*)
								mnt_type=""
								[ -z "$probe_type" ] || mnt_type="-t $probe_type"
								mnt_cmd="mount $mnt_type"
								;;
						esac

						if [ -n "$mnt_cmd" ]; then
							# in case we ran out of pagecache and get mount stuck at "D" state
							echo 3 > /proc/sys/vm/drop_caches
							mkdir -p /extdisks/$device

							$mnt_cmd /dev/$device /extdisks/$device
							if [ "$?" = "0" ] ; then
								dmesg  | tail -n 5 | grep $device | grep -q dirty
								if [ "$?" = "0" ] ; then
									echo "/dev/$device" >> /tmp/.dirty_part
#									mount -o remount,ro /extdisks/$device
									logger -s -p 3 -t "Hotplug" "$device: Dirty $probe_type partition"
								fi
							else
								logger -s -p 3 -t "Hotplug" "$device: Mount failed. Code=$?"
							fi
						else
							logger -s -p 3 -t "Hotplug" "$device: Mount failed. Not support $probe_type"
						fi
					;;
				esac
			}
		}
		reset_dev_section_cb
		;;
	remove)
		logger -s -p 3 -t "Hotplug" "remove $device"
        umount /extdisks/$device
        echo 3 > /proc/sys/vm/drop_caches
		echo 1 > /proc/sys/vm/compact_memory
		;;
	esac

fi

